import pandas as pd
import matplotlib.pyplot as plt
import os

def generar_grafico(csv_path, tama√±o_interes=50000):
    """
    Genera un gr√°fico de barras con los tiempos de ejecuci√≥n
    de todos los algoritmos de ordenamiento para un tama√±o espec√≠fico.
    """

    if not os.path.exists(csv_path):
        print(f"‚ùå No se encontr√≥ el archivo CSV: {csv_path}")
        return

    # Leer CSV asegurando que decimal sea '.'
    df = pd.read_csv(csv_path, decimal='.')

    print(f"‚úÖ CSV le√≠do exitosamente: {len(df)} registros")
    print(f"Columnas detectadas: {list(df.columns)}")

    # Asegurar que la columna de tiempo est√© en float
    try:
        df["Tiempo (ms)"] = pd.to_numeric(df["Tiempo (ms)"], errors="coerce")
    except Exception as e:
        print("‚ö†Ô∏è Error convirtiendo Tiempo (ms) a n√∫mero:", e)

    # Filtrar por tama√±o
    if tama√±o_interes not in df["Tama√±o"].unique():
        print(f"‚ö†Ô∏è El tama√±o {tama√±o_interes} no existe en el CSV.")
        print(f"Tama√±os disponibles: {df['Tama√±o'].unique()}")
        return

    df_size = df[df["Tama√±o"] == tama√±o_interes].copy()

    # Filtrar solo algoritmos v√°lidos
    df_size = df_size[df_size["Tiempo (ms)"] > 0]

    if df_size.empty:
        print("‚ö†Ô∏è No hay datos v√°lidos para graficar este tama√±o.")
        return

    # Ordenar por tiempo ascendente
    df_size = df_size.sort_values("Tiempo (ms)")

    # Gr√°fico de barras
    plt.figure(figsize=(12, 7))
    bars = plt.bar(df_size["M√©todo de ordenamiento"],
                   df_size["Tiempo (ms)"],
                   color="skyblue", edgecolor="black")

    # Etiquetas
    plt.title(f"Tiempos de Algoritmos de Ordenamiento\nTama√±o del Array: {tama√±o_interes:,} elementos",
              fontsize=14, fontweight="bold")
    plt.xlabel("Algoritmos de Ordenamiento", fontsize=12, fontweight="bold")
    plt.ylabel("Tiempo de Ejecuci√≥n (ms)", fontsize=12, fontweight="bold")
    plt.xticks(rotation=45, ha="right")

    # Mostrar valores encima de cada barra
    for bar, tiempo in zip(bars, df_size["Tiempo (ms)"]):
        plt.text(bar.get_x() + bar.get_width()/2., bar.get_height() + max(1, bar.get_height()*0.01),
                 f'{tiempo:.2f} ms',
                 ha='center', va='bottom', fontsize=9, fontweight="bold")

    plt.tight_layout()

    # Guardar como PNG
    output_file = f"benchmark_general_{tama√±o_interes}.png"
    plt.savefig(output_file, dpi=300)
    print(f"üìà Gr√°fico guardado en: {output_file}")

    plt.show()


def main():
    """
    Script principal para graficar benchmarks.
    Elige un tama√±o de array en la variable tama√±o_interes.
    """
    print("üöÄ GRAFICADOR DE BENCHMARK - ALGORITMOS DE ORDENAMIENTO")

    # Ruta del CSV generado en Java
    csv_path = "C:/Users/holda/IdeaProjects/proyectoAlgoritmos/mi_benchmark.csv"

    # Selecciona el tama√±o a graficar (cambiar si quieres otro)
    tama√±o_interes = 50000

    generar_grafico(csv_path, tama√±o_interes)


if __name__ == "__main__":
    main()